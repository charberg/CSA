SYSC 4504 Project
Course Selection Assistant (CSA)
November 28 2014

README.txt

1.
Team Members:
100890068	Christopher Briglio		chrisbriglio@cmail.carleton.ca
100890858	David Briglio			davidbriglio@cmail.carleton.ca

2.
Program used for testing: Software Engineering

3.
TA: Mr.Abaza.

4.
Member Contributions:

The program was divided into 2 sections which were completed by the 2 members.
Christopher was in charge of designing and implementing all the back end of the program which includes the database, 
the files needed to create the database, and all php server scripts. (All files in php folder & data folder). This also
includes all algorithms and classes implemented by the server.
David was in charge of the front end which included all html/css, javascript, and java code.
(All files in java folder, css folder, and pages folder).

The project was version controlled using a GitHub repository, that can be found at: https://github.com/charberg/CSA.git
*Please note that the owner of the repository (charberg - Charles Bergeron) was a previous team member that dropped the course.*

5.
Project Folders:
CSA folder:
Hub of project. Should hold all sub folders required by program and the index.php file to re-direct to the main page.

CSS Folder:
Folder holding all CSS Styles used in the client side HTML pages.

Data Folder:
Holds all data (held in files) needed to create the database. Within are 2 sub-folders. 
These are the Electives sub-folder, and the Patterns sub-folder. The Electives Sub-folder contains text files outlining the courses involved
in a particular elective groups for particular programs. The Patterns folder contains text files that represent the individual patterns of academic programs.

Documentation Folder:
Holds documentation on the project included database UML diagrams, program specifications ect.

Java Folder:
Folder containing all the java code. This folder holds the java version of the client side interface, including the source code and executable jar file.
*See Java folder readme for more information.

Pages Folder:
This folder contains all client-side pages written in HTMl, Javascript and php.

Php Folder:
This folder holds all php server scripts and all server-side code. Within this folder is a sub-folder called 'classes'. This folder contains php classes
that are used throughout the server-side code.

Resources Folder:
Folder containing all images used in client side interfaces.

TempSchedules Folder:
This folder is used as a temporary holder for schedules generated by the server before the client can read in the generated schedules and delete the file.

***
Please ensure that all folders are present and contain the proper fills in order for the program to work:

localhost/CSA/:
	/css/
	/data/
	/documentation/
	/java/
	/pages/
	/php/
	/resources/
	/tempSchedules/
	index.php
	
***

The tasks of the project and mapping of the files used within the project between html-php are as follows:
Upon entering the program (localhost/CSA/), the index.php script will run which will re-direct the user to intro_page.html contained
within the pages folder. At this point the user will be asked to specify his/her program, the year they've completed, whether or not they are
on or off pattern, and what term they wish to generate a schedule for. From here the page sends all of this information to the server.php
file located within the php folder. The server will take this information and do one of 2 things:

	1) If the User specified on-pattern, then it will generate a list of schedules for the specified term using an OnScheduleCourseCalculator
	object, and send this list of schedules along with the other information specified to the my_schedule.php page located in the pages folder.

	2) If the User specified off-pattern, the server will re-direct the user to the Off_Schedule_Courses.php page inside the pages folder.
	From here the user will specify which courses were previously completed and send this information back to the server.php. 
	Then server.php will generate a list of schedules that best corresponds to the courses previously taken by the user,
	using an OffScheduleCourseCalculator object and send this list along with all other information to the my_schedule.php page located in the pages folder.

At this point the my_schedule.php will take that list of schedules and allow the user to choose which one to display. Once the user has chosen
a schedule, he/she hits the submit button, sending the chosen schedule to courseServer.php. The server then takes this list of courses and increases
the number of students for each, returning to my_schedule.php whether or not all the courses were successfully registered in.


6.
Before running the program for the first time, the install.php file must be executed in the browser in order for
the database to be created (located in "localhost/CSA/php/"). Please note, the installation of the database may take some time. It currently has a runtime cap
of 2 minutes, if the runtime is exceeded, simply reload the page. Do this as many times as necessary until the database has been successfully installed.
From there, the user may navigate through the localhost to the CSA program folder ("http://localhost/CSA"). 
From here the index.php file will redirect the user to the first view/page of the program.

In order to add more information to the database, the files within the data folder must be updated.
All files (except those that contain course info) are contained in text files, separating columns for their respective tables by ';', except for Electives, which are separated by a space.

To add more academic programs, simply add them to the AcademicPrograms.txt file while ensure that they follow the proper format.

To add more patterns, simply add a text file (with the academic program as the title) into the patterns folder. Ensure that the format of the files matches those of other pattern files.

To add Electives for different course, simply add the list to the existing electives files, specifying the program you are adding them to.

To add new Elective types, simply add the file to the Electives folder, ensuring the follow the same format as the other electives files (both data and naming convention: *electype*Electives.txt)

To add prerequisites add the course and prerequisite string to the prerreqs.txt in the data folder. Ensure that the prerequisite string
follows the format specified by the prereqMapping.txt file and that all logic possibilities are separated by 'OR', with each of the requirements 'AND'd together.

Currently the program can accommodate any program if that program has all the information added to the proper files in the data folder. This information includes: electives, pattern, and entry in Academic Program table

7.
The program implements the prerequisites of each course by creating a list of possibilities that would allow the user to take the course, then testing those possibilities based on program, years completed, previous courses completed, and courses being taken.
Each course has rows in a database table which hold a string representation depicting each logic possibility. When the program is determining whether the user can take a particular course,
the program retrieves this information from the database and creates a tree of logic possibilities that would allow the user to take the course. Each item in the prerequisite string has
an identifier so the program can determine the contents of the string. These identifiers are explained in the prereqMapping.txt file located in the documentation folder. Upon creating the tree,
the program simply goes through each possibility, interpreting the requirements until all have failed or one has passed. Upon entering the stage where the program checks for prerequisites, the program
already knows the list of completed courses (given by user), the courses that are in the schedule being formulated (concurrent courses), the program (given by user), and the years completed. The years completed is
computed by checking whether the user has in his list of completed courses all mandatory courses (electives exempted) for that particular year as specified by the users programs pattern.

8.
We implemented a recursive algorithm in order to compute a list of conflict free timetables. The algorithm works by maintaining:
an array of courses that encompass the current schedule being worked on, an array of conflict free time tables, an array of courses that were to be considered next in scheduling,
and an array containing lists of courses that were yet to be added to the table. The algorithm begins by looping through the list of courses
that are currently being considered to be added to the time table. This list will be different sections of the same course (ex. ECOR 1010 A, ECOR 1010 B...).
For each possibility the algorithm determines whether the given course conflicts with any other course in the timetable. If it conflicts,
the algorithm will move to the next section. If it does not then the algorithm adds the course to the current schedule. Once added, if the course has no labs, the function will call itself, passing
as parameters: the current schedule, the next list of courses to add, and a list of remaining course lists. If the course has labs, the same process as explained above occurs,
except this time looping through all possible labs to find a conflict free section. At the point when the list of other courses to add is empty, this means that the 
current schedule is complete and the schedule is added to the list of conflict free schedules. Through this algorithm, every possible variation of courses can be found,
for every possible lecture and lab section of each course. For performance purposes, the algorithm stops computing schedules after it has found 10 conflict free timetables.

9.
In our solution, the Server side php scripts take care of identifying the courses that can be taken, based on prerequisites and previously
completed courses. The Server side also determines the conflict-free time tables from this. We believed this to be the best choice, as the server side
has direct access to the database and therefore can retrieve any and all information needed to compute conflict free time tables.


Other Notes:

 - This program has been tested in Google Chrome & Mozilla Firefox web browsers.
 - Due to incomplete course data provided, the program does not have the resources to generate all possible schedules.
   An example is Fourth Year Winter Term Software Engineering: Not all required courses appear in the schedule (SYSC4927 has incomplete data ie: null values for capacity, time and days).
   Another example is Fourth Year Fall Term Software Engineering: The schedule cannot be generated.